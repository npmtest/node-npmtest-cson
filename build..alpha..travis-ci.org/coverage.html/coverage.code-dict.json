{"/home/travis/build/npmtest/node-npmtest-cson/test.js":"/* istanbul instrument in package npmtest_cson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cson/lib.npmtest_cson.js":"/* istanbul instrument in package npmtest_cson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cson = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cson = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cson/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cson && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cson\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cson.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cson.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cson.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cson.__dirname + '/lib.npmtest_cson.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cson/node_modules/cson/es5/index.js":"// Generated by CoffeeScript 1.12.4\nvar CSON, extractOptsAndCallback, fsUtil, pathUtil, requireFresh;\n\nfsUtil = require('safefs');\n\npathUtil = require('path');\n\nextractOptsAndCallback = require('extract-opts');\n\nrequireFresh = require('requirefresh');\n\nCSON = (function() {\n  function CSON() {}\n\n  CSON.prototype.ensureErrorType = function(err) {\n    if (err instanceof Error) {\n      return err;\n    } else {\n      return this.ensureErrorType(err);\n    }\n  };\n\n  CSON.prototype.complete = function(result, next) {\n    if (next) {\n      if (result instanceof Error) {\n        next(result);\n      } else {\n        next(null, result);\n      }\n      return this;\n    } else {\n      return result;\n    }\n  };\n\n  CSON.prototype.getOptions = function(opts) {\n    if (opts == null) {\n      opts = {};\n    }\n    if (opts.format == null) {\n      opts.format = null;\n    }\n    if (opts.filename == null) {\n      opts.filename = null;\n    }\n    if (opts.filename) {\n      opts.filename = pathUtil.resolve(opts.filename);\n      if (opts.format == null) {\n        opts.format = this.getFormat(opts.filename);\n      }\n    }\n    if (opts.json == null) {\n      opts.json = true;\n    }\n    if (opts.cson == null) {\n      opts.cson = true;\n    }\n    if (opts.javascript == null) {\n      opts.javascript = false;\n    }\n    if (opts.coffeescript == null) {\n      opts.coffeescript = false;\n    }\n    return opts;\n  };\n\n  CSON.prototype.getFormat = function(file) {\n    switch (pathUtil.extname(file)) {\n      case '.json':\n        return 'json';\n      case '.cson':\n        return 'cson';\n      case '.coffee':\n        return 'coffeescript';\n      case '.js':\n        return 'javascript';\n      default:\n        return null;\n    }\n  };\n\n  CSON.prototype.action = function(args) {\n    var action, data, next, opts, prefix, ref, ref1, result, suffix;\n    action = args.action, prefix = args.prefix, suffix = args.suffix, data = args.data, opts = args.opts, next = args.next;\n    if (suffix == null) {\n      suffix = '';\n    }\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    switch (action) {\n      case 'requireFile':\n      case 'parseFile':\n        if (opts.filename == null) {\n          opts.filename = data;\n        }\n    }\n    opts = this.getOptions(opts);\n    if ((ref1 = opts.format) === null || ref1 === 'cson') {\n      if (opts.cson === true) {\n        result = this[prefix + 'CSON' + suffix](data, opts);\n      } else {\n        result = new Error(\"CSON.\" + action + \": Desired format is CSON however CSON is disabled by an option\");\n      }\n    } else if (opts.format === 'json') {\n      if (opts.json === true) {\n        result = this[prefix + 'JSON' + suffix](data, opts);\n      } else {\n        result = new Error(\"CSON.\" + action + \": Desired format is JSON however JSON is disabled by an option\");\n      }\n    } else if (opts.format === 'javascript') {\n      if (opts.javascript === true) {\n        result = this[prefix + 'JS' + suffix](data, opts);\n      } else {\n        result = new Error(\"CSON.\" + action + \": Desired format is JavaScript however JavaScript is disabled by an option\");\n      }\n    } else if (opts.format === 'coffeescript') {\n      if (opts.coffeescript === true) {\n        result = this[prefix + 'CS' + suffix](data, opts);\n      } else {\n        result = new Error(\"CSON.\" + action + \": Desired format is CoffeeScript however CoffeeScript is disabled by an option\");\n      }\n    } else {\n      result = new Error(\"CSON.\" + action + \": Desired format is not supported\");\n    }\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.stringify = function(data, replacer, indent) {\n    var opts;\n    opts = {};\n    opts.replacer = replacer;\n    opts.indent = indent;\n    return this.createCSONString(data, opts);\n  };\n\n  CSON.prototype.parse = function(data, opts, next) {\n    return this.parseCSONString(data, opts, next);\n  };\n\n  CSON.prototype.load = function(data, opts, next) {\n    return this.parseCSONFile(data, opts, next);\n  };\n\n  CSON.prototype.createString = function(data, opts, next) {\n    return this.action({\n      action: 'createString',\n      prefix: 'create',\n      suffix: 'String',\n      data: data,\n      opts: opts,\n      next: next\n    });\n  };\n\n  CSON.prototype.parseString = function(data, opts, next) {\n    return this.action({\n      action: 'parseString',\n      prefix: 'parse',\n      suffix: 'String',\n      data: data,\n      opts: opts,\n      next: next\n    });\n  };\n\n  CSON.prototype.parseFile = function(data, opts, next) {\n    return this.action({\n      action: 'parseFile',\n      prefix: 'parse',\n      suffix: 'File',\n      data: data,\n      opts: opts,\n      next: next\n    });\n  };\n\n  CSON.prototype.requireFile = function(data, opts, next) {\n    return this.action({\n      action: 'requireFile',\n      prefix: 'require',\n      suffix: 'File',\n      data: data,\n      opts: opts,\n      next: next\n    });\n  };\n\n  CSON.prototype.createJSONString = function(data, opts, next) {\n    var err, ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    opts = this.getOptions(opts);\n    if (opts.replacer == null) {\n      opts.replacer = null;\n    }\n    if (opts.indent == null) {\n      opts.indent = '  ';\n    }\n    try {\n      result = JSON.stringify(data, opts.replacer, opts.indent);\n    } catch (error) {\n      err = error;\n      result = this.ensureErrorType(err);\n    }\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.createCSONString = function(data, opts, next) {\n    var err, ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    opts = this.getOptions(opts);\n    if (opts.replacer == null) {\n      opts.replacer = null;\n    }\n    if (opts.indent == null) {\n      opts.indent = '\\t';\n    }\n    try {\n      result = require('cson-parser').stringify(data, opts.replacer, opts.indent);\n    } catch (error) {\n      err = error;\n      result = this.ensureErrorType(err);\n    }\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.createCSString = function(data, opts, next) {\n    var ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    result = new Error('CSON.createCS: Creating CoffeeScript code is not yet supported');\n    return this.complete(result, next);\n\n    /*\n    \t\tPotentially we could use something like the following from CSON v1\n    \t\tHowever the JSON.stringify gets rid of functions...\n    \t\twhich is the entire point of the coffee-script mode over the CSON mode...\n    \t\tSo until we figure out how to toString() an object and keep the functions intact,\n    \t\tunsafe stringifying to CSON or CS or JS won't happen.\n    \n    \t\tPerhaps https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n    \t\twill be of use one day\n    \n    \t\tsrc = \"var result = #{JSON.stringify obj}\"\n    \t\tresult = require('js2coffee').build(src, opts).code\n    \t\tresult = result.replace(/^\\s*result\\s*\\=\\s/, '')\n    \t\tif /^\\s/.test(result) is false\n    \t\t\tresult = result.trim()\n    \t\tif typeof obj is 'object'\n    \t\t\tunless Array.isArray(obj)\n    \t\t\t\tresult = '{'+result+'}'  unless result is '{}'\n    \t\treturn result\n     */\n  };\n\n  CSON.prototype.createJSString = function(data, opts, next) {\n    var ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    result = new Error('CSON.createJS: Creating JavaScript code is not yet supported');\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.parseJSONString = function(data, opts, next) {\n    var err, ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    try {\n      result = JSON.parse(data);\n    } catch (error) {\n      err = error;\n      result = this.ensureErrorType(err);\n    }\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.parseCSONString = function(data, opts, next) {\n    var err, ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    try {\n      result = require('cson-parser').parse(data);\n    } catch (error) {\n      err = error;\n      result = this.ensureErrorType(err);\n    }\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.parseJSString = function(data, opts, next) {\n    var err, ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    opts = this.getOptions(opts);\n    if (opts.context == null) {\n      opts.context = {};\n    }\n    try {\n      result = require('vm').runInNewContext(data, opts.context, opts);\n    } catch (error) {\n      err = error;\n      result = this.ensureErrorType(err);\n    }\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.parseCSString = function(data, opts, next) {\n    var err, ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    opts = this.getOptions(opts);\n    try {\n      result = require('coffee-script')[\"eval\"](data, opts);\n    } catch (error) {\n      err = error;\n      result = this.ensureErrorType(err);\n    }\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.parseJSONFile = function(file, opts, next) {\n    var ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    result = fsUtil.readFileSync(file);\n    if (result instanceof Error) {\n      result = result;\n    } else {\n      result = this.parseJSONString(result.toString(), opts);\n    }\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.parseCSONFile = function(file, opts, next) {\n    var ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    result = fsUtil.readFileSync(file);\n    if (result instanceof Error) {\n      result = result;\n    } else {\n      result = this.parseCSONString(result.toString(), opts);\n    }\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.parseJSFile = function(file, opts, next) {\n    var ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    result = fsUtil.readFileSync(file);\n    if (result instanceof Error) {\n      result = result;\n    } else {\n      result = this.parseJSString(result.toString(), opts);\n    }\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.parseCSFile = function(file, opts, next) {\n    var ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    result = fsUtil.readFileSync(file);\n    if (result instanceof Error) {\n      result = result;\n    } else {\n      result = this.parseCSString(result.toString(), opts);\n    }\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.requireJSONFile = function(file, opts, next) {\n    var ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    result = this.parseJSONFile(file, opts);\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.requireCSONFile = function(file, opts, next) {\n    var ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    result = this.parseCSONFile(file, opts);\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.requireJSFile = function(file, opts, next) {\n    var err, ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    try {\n      result = requireFresh(file);\n    } catch (error) {\n      err = error;\n      result = this.ensureErrorType(err);\n    }\n    return this.complete(result, next);\n  };\n\n  CSON.prototype.requireCSFile = function(file, opts, next) {\n    var err, ref, result;\n    ref = extractOptsAndCallback(opts, next), opts = ref[0], next = ref[1];\n    require('coffee-script/register');\n    try {\n      result = requireFresh(file);\n    } catch (error) {\n      err = error;\n      result = this.ensureErrorType(err);\n    }\n    return this.complete(result, next);\n  };\n\n  return CSON;\n\n})();\n\nmodule.exports = new CSON();\n","/home/travis/build/npmtest/node-npmtest-cson/node_modules/cson/es5/cli.js":"// Generated by CoffeeScript 1.12.4\nvar CSON, conversion, create, data, filePath, fs, hasData, i, opts, outputHelp, parse, processData, result, stdin, timeout, timeoutFunction;\n\nfs = require('fs');\n\nCSON = require('../');\n\nopts = {};\n\noutputHelp = function() {\n  return process.stdout.write('CSON CLI\\n\\nUsage:\\n\\n\t# Convert a JSON file into a CSON file\\n\tjson2cson in.json > out.cson\\n\\n\t# Same thing via piping\\n\tcat in.json | json2cson > out.cson\\n\\n\t# Convert a CSON file into a JSON file\\n\tcson2json in.cson > out.json\\n\\n\t# Same thing via piping\\n\tcat in.cson | cson2json > out.json\\n\\nOptions\\n\\n\t# Display this help\\n\t--help\\n\\n\t# Indentation for CSON output\\n\t--tabs\\n\t--2spaces\\n\t--4spaces\\n');\n};\n\nif (process.argv.indexOf('--help') !== -1) {\n  outputHelp();\n  process.exit(0);\n}\n\nif (process.argv.toString().indexOf('cson2json') !== -1) {\n  conversion = 'cson2json';\n} else if (process.argv.toString().indexOf('json2cson') !== -1) {\n  conversion = 'json2cson';\n  opts.indent = (i = process.argv.indexOf('--tabs')) !== -1 ? '\\t' : (i = process.argv.indexOf('--2spaces')) !== -1 ? '  ' : (i = process.argv.indexOf('--4spaces')) !== -1 ? '    ' : void 0;\n  if (i !== -1) {\n    process.argv = process.argv.slice(0, i).concat(process.argv.slice(i + 1));\n  }\n} else {\n  process.stderr.write('Unknown conversion');\n  process.exit(1);\n}\n\nif (process.argv.length === 3) {\n  filePath = process.argv[2];\n  if (conversion === 'cson2json') {\n    parse = CSON.parseCSONFile.bind(CSON);\n    create = CSON.createJSONString.bind(CSON);\n  } else {\n    parse = CSON.parseJSONFile.bind(CSON);\n    create = CSON.createCSONString.bind(CSON);\n  }\n  result = parse(filePath);\n  if (result instanceof Error) {\n    throw result;\n  }\n  result = create(result, opts);\n  if (result instanceof Error) {\n    throw result;\n  }\n  process.stdout.write(result);\n} else if (process.argv.length === 2) {\n  data = '';\n  hasData = function() {\n    return data.replace(/\\s+/, '').length !== 0;\n  };\n  processData = function() {\n    if (conversion === 'cson2json') {\n      parse = CSON.parseCSONString.bind(CSON);\n      create = CSON.createJSONString.bind(CSON);\n    } else {\n      parse = CSON.parseJSONString.bind(CSON);\n      create = CSON.createCSONString.bind(CSON);\n    }\n    result = parse(data);\n    if (result instanceof Error) {\n      throw result;\n    }\n    result = create(result, opts);\n    if (result instanceof Error) {\n      throw result;\n    }\n    return process.stdout.write(result);\n  };\n  timeoutFunction = function() {\n    var timeout;\n    timeout = null;\n    if (hasData() === false) {\n      stdin.pause();\n      process.stderr.write('No STDIN data received...');\n      return process.exit(1);\n    }\n  };\n  timeout = setTimeout(timeoutFunction, 1000);\n  stdin = process.stdin;\n  stdin.setEncoding('utf8');\n  stdin.resume();\n  stdin.on('data', function(_data) {\n    return data += _data.toString();\n  });\n  process.stdin.on('end', function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n    return processData();\n  });\n} else {\n  outputHelp();\n  process.exit(1);\n}\n"}